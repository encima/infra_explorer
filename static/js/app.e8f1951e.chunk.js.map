{"version":3,"sources":["App.tsx"],"names":["client","ApolloClient","uri","headers","cache","InMemoryCache","Instances","useQuery","gql","loading","error","data","instances","products","map","instance","vm","attributes","attr","prices","price","push","console","log","colNames","colSettings","name","type","COL_TYPES","INT","STRING","noOfPages","App","style","styles","container","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent"],"mappings":"gRAaMA,EAAS,IAAIC,IAAa,CAC9BC,IAAK,sCACLC,QAAS,CAAE,YAAY,oCACvBC,MAAO,IAAIC,MAKb,SAASC,IAEP,MAAiCC,YAASC,YAAA,IAAD,gYAAjCC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAsBxB,GAAIF,EAAS,OAAO,yCACpB,GAAIC,EAAO,OAAO,uCAEpB,IAAIE,EAAY,GAeZ,OAdJD,EAAKE,SAASC,KAAI,SAAAC,GAChB,IAAIC,EAAK,GACTD,EAASE,WAAWH,KAAI,SAAAI,GACtBF,EAAGE,EAAI,KAAWA,EAAI,SAExBH,EAASI,OAAOL,KAAI,SAAAM,GAClBJ,EAAE,iBAAuBI,EAAK,IAC9BJ,EAAE,kBAAuC,IAAfI,EAAK,OAEjCR,EAAUS,KAAKL,MAIjBM,QAAQC,IAAIX,EAAU,IAEhB,kBAAC,IAAD,CACID,KAAMC,EACNY,SAAU,CAAC,mBAAoB,eAC/BC,YAAa,CAAC,CAAEC,KAAM,mBAAoBC,KAAMC,IAAUC,KAAO,CAACH,KAAM,cAAeC,KAAMC,IAAUE,SACvGC,UAAW,IAcN,SAASC,IAItB,OACE,kBAAC,IAAD,CAAgBhC,OAAQA,GACtB,kBAAC,IAAD,CAAMiC,MAAOC,EAAOC,WAClB,kBAAC7B,EAAD,MACA,kBAAC,IAAD,CAAW2B,MAAM,WAMzB,IAAMC,EAASE,IAAWC,OAAO,CAC/BF,UAAW,CACTG,KAAM,EACNC,gBAAiB,OACjBC,WAAY,SACZC,eAAgB,c","file":"static/js/app.e8f1951e.chunk.js","sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport DataTable, {COL_TYPES} from 'react-native-datatable-component';\nimport {API_KEY} from \"@env\";\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  useQuery,\n  gql\n} from \"@apollo/client\";\n\nconst client = new ApolloClient({\n  uri: \"https://infracost.aiven.dev/graphql\",\n  headers: { \"X-API-Key\": API_KEY},\n  cache: new InMemoryCache()\n});\n\n\n\nfunction Instances() {\n\n  const { loading, error, data } = useQuery(gql`\n    query GetInstances {\n      products(\n      filter: {\n        vendorName: \"gcp\",\n        service: \"Compute Engine\",\n        productFamily: \"Compute Instance\",\n        region: \"europe-west1\"\n      },\n    ) {\n      prices(\n        filter: {\n          purchaseOption: \"on_demand\"\n        },\n      ) { USD }\n      attributes {key,value}\n    }\n  }\n    `\n  );\n\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n\nlet instances = []    \ndata.products.map(instance => {\n  let vm = {}\n  instance.attributes.map(attr => {\n    vm[attr[\"key\"]] = attr[\"value\"]\n  })\n  instance.prices.map(price => {\n    vm[\"hourly_price_usd\"] = price[\"USD\"]\n    vm[\"monthly_price_usd\"] = price[\"USD\"] * 730\n  })\n  instances.push(vm);\n})\n\n\nconsole.log(instances[0])\n    return (\n      <DataTable\n          data={instances}\n          colNames={['hourly_price_usd', 'machineType']}\n          colSettings={[{ name: 'hourly_price_usd', type: COL_TYPES.INT }, {name: 'machineType', type: COL_TYPES.STRING}]}\n          noOfPages={1} //number\n      />\n  );\n  \n  return <p>{data.products.length}</p>\n\n  // return render(data.products.forEach(vm => (\n  //   <div key={vm[\"prices\"][0][\"USD\"]}>\n  //     <p>{vm[\"prices\"][0][\"USD\"]}</p>\n  //   </div>\n  // )));\n\n}\n\nexport default function App() {\n\n\n\n  return (\n    <ApolloProvider client={client}>\n      <View style={styles.container}>\n        <Instances />\n        <StatusBar style=\"auto\" />\n      </View>\n    </ApolloProvider>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n"],"sourceRoot":""}